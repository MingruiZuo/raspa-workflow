#!/usr/bin/python
# -*- coding: UTF-8 -*-

"""
This is a Python script for RASPA after simulations.
This script will read output listed in [Work_Dictionary.txt] (generated by [Script_raspa.py]).
A [Trend.txt] file will be written for convergence analysis.
[Last_print.py] can execute this script systematically.
Author: Mingrui.Zuo19@student.xjtlu.edu.cn
Lifeng.Ding's group, department of Chemistry, school of Science, XJTLU
last edited: 2024/10/01
"""

import re
import os
import sys
import datetime

# Basic information
uptake_word = ("absolute adsorption:", "excess adsorption:")
unit_word = (
    r"\s+(\d+\.\d+) \[mol\/uc],",         # group1 [mol/uc]
    r"\s+(\d+\.\d+) \[mol\/kg],",         # group2 [mol/kg]
    r"\s+(\d+\.\d+) \[mg\/g]",            # group3 [mg/g]
    r"\s+(\d+\.\d+) \[cm\^3 STP\/g],",    # group4 [cm^3 STP/g]
    r"\s+(\d+\.\d+) \[cm\^3 STP\/cm\^3]"  # group5 [cm^3 STP/cm^3]
)
unit_word_avg = (
    r"\s+(\d+.\d+) \(avg.\s+(\d+.\d+)\) \[mol\/uc],",
    r"\s+(\d+.\d+) \(avg.\s+(\d+.\d+)\) \[mol\/kg],",
    r"\s+(\d+.\d+) \(avg.\s+(\d+.\d+)\) \[mg\/g]",
    r"\s+(\d+.\d+) \(avg.\s+(\d+.\d+)\) \[cm\^3 STP\/g],"
    r"\s+(\d+.\d+) \(avg.\s+(\d+.\d+)\) \[cm\^3 STP\/cm\^3]"
)

unit_pattern = "".join(unit_word)
unit_avg_pattern = "".join(unit_word_avg)

pattern_dict = {
    "[Init] Abs": fr"{uptake_word[0]}{unit_pattern}",
    "[Init] Exc": fr"{uptake_word[1]}{unit_pattern}",
    "[Prod] Abs": fr"{uptake_word[0]}{unit_avg_pattern}",
    "[Prod] Exc": fr"{uptake_word[1]}{unit_avg_pattern}"
}

# Setting
raspa_output = sys.argv[1]  # raspa_output is defined from output_path of Last_print.py
gas = raspa_output.split("/")[-6]
# When using the script for a single path, let raspa_output = r'/path/output_name.data'
filename = "Trend_"+gas+"_"+os.path.basename(raspa_output).strip(".data").strip("output_")+".txt"

# Reading output
with open(raspa_output, 'r') as output:
    content = output.read()

# Writing block 0
with open(filename, "w") as cvg:
    cvg.writelines("\n0.[Init] Adsorption amount\n")
    cvg.writelines("================================\n")
    cvg.writelines("\n")
    cvg.writelines(f"{'[mol/uc]':<15} {'[mol/kg]':<15} {'[mg/g]':<15} {'[cm^3 STP/g]':<15} {'[cm^3 STP/cm^3]':<20}\n")
    cvg.writelines("--------------------------------------------------------------------------------\n")

matches = re.findall(pattern_dict["[Init] Abs"], content)
if matches:
    for match in matches:
        print(f"mol/uc: {match[0]}, mol/kg: {match[1]}, mg/g: {match[2]}, cm^3 STP/g: {match[3]}, cm^3 STP/cm^3: {match[4]}")
        with open(filename, "a") as cvg:
            cvg.writelines(f"{match[0]:<15} {match[1]:<15} {match[2]:<15} {match[3]:<15} {match[4]:<20}\n")

with open(filename, "a") as cvg:
    cvg.writelines("\n1.[Prod] Adsorption amount\n")
    cvg.writelines("================================\n")
    cvg.writelines("\n")
    cvg.writelines(f"{'[mol/uc]':<15} {'[mol/kg]':<15} {'[mg/g]':<15} {'[cm^3 STP/g]':<15} {'[cm^3 STP/cm^3]':<20}\n")
    cvg.writelines("--------------------------------------------------------------------------------\n")

matches = re.findall(pattern_dict["[Prod] Abs"], content)
if matches:
    for match in matches:
        print(f"mol/uc: {match[0]}, mol/kg: {match[2]}, mg/g: {match[4]}, cm^3 STP/g: {match[6]}, cm^3 STP/cm^3: {match[8]}")
        with open(filename, "a") as cvg:
            cvg.writelines(f"{match[0]:<15} {match[2]:<15} {match[4]:<15} {match[6]:<15} {match[8]:<20}\n")

with open(filename, "a") as cvg:
    cvg.writelines("\n2.[Prod] Average amount\n")
    cvg.writelines("================================\n")
    cvg.writelines("\n")
    cvg.writelines(f"{'[mol/uc]':<15} {'[mol/kg]':<15} {'[mg/g]':<15} {'[cm^3 STP/g]':<15} {'[cm^3 STP/cm^3]':<20}\n")
    cvg.writelines("--------------------------------------------------------------------------------\n")

matches = re.findall(pattern_dict["[Prod] Abs"], content)
if matches:
    for match in matches:
        print(f"mol/uc: {match[1]}, mol/kg: {match[3]}, mg/g: {match[5]}, cm^3 STP/g: {match[7]}, cm^3 STP/cm^3: {match[9]}")
        with open(filename, "a") as cvg:
            cvg.writelines(f"{match[1]:<15} {match[3]:<15} {match[5]:<15} {match[7]:<15} {match[9]:<20}\n")


# Writing block 1
with open(filename, "a") as js:
    js.writelines("\n#.Code information\n")
    js.writelines("================================\n")
    js.writelines("State statistics were generated through: //Trend_raspa.py// [version 240930]\n")
    js.writelines("Script coded by: Mingrui.Zuo19@student.xjtlu.edu.cn\n")
    js.writelines(f"Date: {datetime.datetime.now()}\n")
    js.writelines(f"Output: {raspa_output}")
